@page
@model Website.Pages.Pages.PasswordManagerModel
@{
    ViewData["Title"] = "Password Manager";
    ViewData["Description"] = "A password manager for my third COMPX518 assignment.";
}

@section Meta {
    <meta name="keywords" content="compx518, waikato university, pbkdf2, password manager, security, c#, kdf">
    <meta name="author" content="Dominic Maas">
}

<h1>@ViewData["Title"]</h1>

<p><a href="https://github.com/dominicmaas/passwordmanager">Github Repo</a></p>

<h2>Master Password Authentication</h2>

<p>For this application, the master password is used as the encryption key (after going through a KDF (Key Derivation Function)). This KDF required the following features:</p>

<ul>
    <li><p>Protection against rainbow table attacks (by salting the password)</p></li>
    <li><p>Variable password length = fixed output length (for the key)</p></li>
    <li><p>Sufficient computation time to prevent brute force guessing every possible password</p></li>
</ul>

<p>
    To meet these requirements, I choose PBKDF2 as my key derivation function. PBKDF2 is used by other large firms such as 1Password for their master password
    hashes and is recommended by OWASP. The C# class that provides this functionality is "Rfc2898DeriveBytes".
</p>

<p>
    The password is salted with a 32 cryptographically secure random byte array to avoid rainbow-table attacks (precomputed hash tables which aid in discovering passwords) and is
    hashed using HMAC-SHA512 with 200,000 iterations. The use of SHA512 and many iterations combined makes the hashing function fairly slow. This increases the time it
    takes to hash every possible password combination.
</p>

<h2>Password Storage</h2>

<p>
    The password vault is stored as a *.vault (or any user supplied extension) file. This binary file contains the encrypted passwords,
    alongside the password hash salt, nonce, and authentication tag. The C# class "DataPacker" is used to pack and unpack the binary file
    into usable byte arrays. See the table below for a visual representation of the file.
</p>

<table class="pure-table pure-table-horizontal pure-table-striped">
    <thead>
        <tr>
            <th scope="col">Cipher Text</th>
            <th scope="col">Salt</th>
            <th scope="col">Nonce</th>
            <th scope="col">Authentication Tag</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Variable Bytes</td>
            <td>32 Bytes</td>
            <td>12 bytes</td>
            <td>16 bytes</td>
        </tr>
    </tbody>
</table>
<br />

<p>
    The cipher text is generated using AES GCM (Galois/Counter Mode) as per the OWASP cryptographic storage recommendations. The GCM cipher mode provides
    both data authenticity (integrity) and confidentially. GCM does not require the use of an external "Encrypt-then-MAC" scheme which is commonly
    used during CBC and CTR cipher modes (as they don’t provide any guarantees on the authenticity of the encrypted data unlike GCM).
</p>

<p>
    The key used for AES GCM is a 256bit value obtained from a Key Derivation Function (KDF). This KDF is mentioned in more detail in the previous section,
    "Master Password Authentication". In summary, the key is derived from the user’s master password going through a PBKDF2-HMAC-SHA512 function with
    200,000 iterations.
</p>

<p>
    In order to access the vault, the user must supply the same master password which they used to first create the vault. Without this master password,
    the contents of the vault cannot be decrypted (the salt, nonce and tag alone cannot decrypt the vault and are considered public information).
    The users master password, generated hash, or key are never stored to disk.
</p>

<p>
    Once the plain text is obtained, a <strong>System.Text.Json</strong> serializer is used to turn the raw bytes into a c# class which contains all the passwords (and vice versa).
</p>

<h2>Attack Vectors</h2>

<h3>Physical Access</h3>
<p>
    An attacker may gain physical access to the vault file which contains all the encrypted passwords. Even if the attacker knows the file layout
    (cipher text, salt, nounce and tag), they cannot gain access to the file without brute forcing the master password. A unique salt (randomly generated
    with a cryptographically secure method) ensures that Rainbow Table attacks (containing precomputed hashes) cannot be used against the vault. The
    <abbr title="Key Derivation Function – See 'Master Password Authentication'">KDF</abbr> ensures the attacker must spend x amount of time to generate each
    password, further lessoning the appeal of brute force attack.
</p>

<h2>Out of Scope Attack Vectors</h2>
<p>There are two main attack vectors that I considered out of scope for this application and did not design a way to prevent them. Key loggers and memory dumps.</p>

<h3>Key Loggers</h3>
<p>
    There is no way for me to detect if a key logger is on the user’s system, or prevent the users input from being
    detected when they are entering their master password. If a key logger can gain access to the user’s master
    password, then the users password vault is compromised (and likely everything on their system regardless).
</p>

<h3>Memory Dumping / Scanning</h3>
<p>
    If a malicious user or program is scanning or dumping system memory, an attacker may be able to access to
    traces of the user’s master password (although not explicitly stored anywhere, it is sent through methods),
    the key used to encrypt the vault (stored in memory while the vault is open) and all the users encrypted passwords
    (stored as an object in memory while the vault is open). I’ve considered this out of scope as if someone is scanning
    / dumping system memory, nothing is safe and the whole system is compromised.
</p>

<p>
    Additionally, due to the C# Garbage collector, after closing a vault, the vault contents and key may still hang out in memory.
    These variables are set to null within the application, but the garbage collector will decide when to get rid of them.
</p>

<h2>Notes</h2>

<p>When running the program on macOS, you may get an error like “No usable version of libssl was found”. </p>

<p>
    See: <a href="https://docs.microsoft.com/en-us/dotnet/standard/security/cross-platform-cryptography#aes-ccm-and-aes-gcm-on-macos">https://docs.microsoft.com/en-us/dotnet/standard/security/cross-platform-cryptography#aes-ccm-and-aes-gcm-on-macos</a>
</p>

<p>
    Also see: <a href="https://blog.bokan.io/posts/aesccm-and-aesgcm-in-dotnet-core-on-macos-catalina/">https://blog.bokan.io/posts/aesccm-and-aesgcm-in-dotnet-core-on-macos-catalina/</a>
</p>

<p>
    This application has been tested to run on Windows 10 v21H1, and macOS Big Sur, you will need the .NET 6 SDK installed.
    Simply running the following commands should work:
</p>

<ul>
    <li><p>dotnet restore</p></li>
    <li><p>dotnet test</p></li>
    <li><p>dotnet run –project PasswordManager</p></li>
</ul>

<p>You may need to prepend the export above if using macOS (export … && dotnet …)</p>

<h2>Resources</h2>

<ul>
    <li><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html">Cryptographic Storage Cheat Sheet - OWASP Cheat Sheet Series</a></p></li>
    <li><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pbkdf2">Password Storage: PBKDF2 - OWASP Cheat Sheet Series</a></p></li>
    <li><p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider">RNGCryptoServiceProvider Class - Microsoft Docs</a></p></li>
    <li><p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-5.0">AesGcm Class - Microsoft Docs</a></p></li>
    <li><p><a href="https://owasp.org/www-community/password-special-characters">Password Special Characters - OWASP</a></p></li>
    <li><p><a href="https://1passwordstatic.com/files/security/1password-white-paper.pdf">1Password Security Design</a></p></li>
    <li><p><a href="https://www.dashlane.com/download/Dashlane_SecurityWhitePaper_March2021.pdf">Dashlane Security White Paper (March 2021)</a></p></li>
</ul>
